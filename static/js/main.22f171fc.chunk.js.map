{"version":3,"sources":["components/Score.jsx","components/Header.jsx","helpers/random-value.js","components/Operation.jsx","components/Result.jsx","assets/sounds/error-sound.mp3","assets/sounds/correct-sound.mp3","App.js","index.js"],"names":["Score","score","Header","setSelectedOp","lives","heartsRest","heartsLosed","i","push","HeartFilled","className","Math","random","losed","HeartOutlined","useState","operator","setOperator","onClickOperator","e","preventDefault","target","value","useEffect","gutter","justify","xs","md","align","onClick","span","map","el","randomNumber","min","max","round","Operation","selectedOp","setResult","clicked","num1","num2","numbers","setNumbers","getRandomNumber","result","multiplo","v1","v2","Result","setScore","setClicked","setLives","resetLives","playCorrect","playError","values","setValues","value1","value2","shuffleArray","checkingResult","parseInt","message","success","warning","gameOver","numbersArray","sort","Modal","info","title","style","textAlign","fontSize","content","fontWeight","padding","onOk","val","App","Audio","audioCorrect","play","audioError","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.22f171fc.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Score = ({ score }) => {\r\n    return (\r\n        <div>\r\n           <h4>You Score:</h4> \r\n           <p>{score}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Score\r\n","import React, { useEffect, useState } from 'react'\r\nimport Score from './Score'\r\n\r\nimport 'antd/dist/antd.css';\r\nimport { Row, Col } from 'antd';\r\nimport { HeartOutlined, HeartFilled } from '@ant-design/icons';\r\n\r\nconst Header = ({ setSelectedOp, score, lives }) => {\r\n\r\n    let heartsRest = [];\r\n    let heartsLosed = []\r\n\r\n\r\n    for (let i = 0; i < lives; i++){\r\n        heartsRest.push(<HeartFilled key={Math.random()} className=\"hearts\"/>)\r\n    }\r\n    \r\n    let losed = 5 - lives;\r\n    for (let i = 0; i < losed; i++){\r\n        heartsLosed.push(<HeartOutlined key={Math.random()} className=\"losed-heart\"/>)\r\n    }\r\n\r\n    const [operator, setOperator] = useState();\r\n\r\n    const onClickOperator = e =>{\r\n        e.preventDefault();\r\n        setOperator(e.target.value);\r\n    }\r\n    \r\n    useEffect(()=>{\r\n        setSelectedOp(operator);\r\n    },[operator]);\r\n\r\n    useEffect(()=>{\r\n        setSelectedOp(\"+\");\r\n    },[]);\r\n\r\n    return (\r\n        <Row gutter={[0,5]} justify=\"space-around\">\r\n            <Col xs={24} md={17} >\r\n                <Row className=\"selection glass glass-blue\" align=\"middle\">\r\n                    <Col xs={24} md={12}>\r\n                        <h2>Select operation: </h2>\r\n                    </Col>\r\n                    <Col xs={24} md={12}>\r\n                        <button className=\"op-button\" value=\"+\" onClick={onClickOperator}>+</button>\r\n                        <button className=\"op-button\" value=\"-\" onClick={onClickOperator}>-</button>\r\n                        <button className=\"op-button\" value=\"x\" onClick={onClickOperator}>x</button>\r\n                        <button className=\"op-button\" value=\"%\" onClick={onClickOperator}>%</button>\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n\r\n\r\n            <Col xs={24} md={4} className=\"score glass glass-white\">\r\n                {/* Show the actual Score */}\r\n                <Score \r\n                    score={score}\r\n                    />\r\n            </Col>\r\n\r\n            <Col span={24} className=\"lives glass\">\r\n                <h3>Lives: </h3>\r\n                {heartsRest.map(el=>{\r\n                    return el\r\n                })}\r\n                \r\n                {heartsLosed.map(el=>{\r\n                    return el\r\n                })}\r\n\r\n                \r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","\r\nconst randomNumber = (min, max) =>{\r\n    return Math.round(Math.random() * (max - min) + min);\r\n}\r\n\r\nexport default randomNumber;","import React, { useEffect, useState } from 'react'\r\nimport randomNumber from '../helpers/random-value'\r\n\r\nconst Operation = ({ selectedOp, setResult, clicked }) => {\r\n\r\n    const [numbers, setNumbers] = useState({\r\n        num1: 0,\r\n        num2: 1\r\n    })\r\n\r\n    useEffect(()=>{\r\n        getRandomNumber();\r\n    },[selectedOp]);\r\n\r\n    useEffect (()=>{\r\n        getRandomNumber();\r\n    },[clicked]);\r\n\r\n\r\n    useEffect(()=>{\r\n        let result;\r\n        switch (selectedOp) {\r\n            case '+':\r\n                result = numbers.num1 + numbers.num2;\r\n                break;\r\n            case '-':\r\n                result = numbers.num1 - numbers.num2;\r\n                if( result < 0){\r\n                    getRandomNumber();\r\n                    result = numbers.num1 - numbers.num2;\r\n                }\r\n                break;\r\n            case 'x':\r\n                result = numbers.num1 * numbers.num2;\r\n                break;\r\n            case '%':\r\n\r\n                if(multiplo(numbers.num1, numbers.num2)){\r\n                    result = numbers.num1 / numbers.num2;\r\n                }else{\r\n                    result = 0;\r\n                    getRandomNumber();\r\n                }\r\n                break;\r\n        }\r\n        setResult(result);\r\n    },[numbers]);\r\n\r\n    const getRandomNumber = ()=>{\r\n        if(selectedOp === '%'){\r\n            setNumbers({\r\n                num1:randomNumber(0,99),\r\n                num2:randomNumber(0,10)\r\n            });\r\n        }else{\r\n            setNumbers({\r\n                num1:randomNumber(0,9),\r\n                num2:randomNumber(0,9)\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    const multiplo = (v1, v2)=>{\r\n        let remainder = v1 % v2;\r\n        if (remainder === 0){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <p>\r\n                { selectedOp ?`${numbers.num1}` : ``}\r\n            </p>\r\n            <p>\r\n                { selectedOp ?`${selectedOp}` : ``}\r\n            </p>\r\n            <p>\r\n                { selectedOp ?`${numbers.num2}` : ``}\r\n            </p>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Operation\r\n","import React, { useEffect, useState } from 'react'\r\nimport randomNumber from '../helpers/random-value'\r\n\r\nimport 'antd/dist/antd.css';\r\nimport { message, Modal } from 'antd';\r\n\r\n\r\nconst Result = ({setScore, setClicked, setLives, resetLives, playCorrect, playError, result, score, clicked, lives }) => {\r\n    \r\n    // useState array of values to show in the result panel \r\n    const [values, setValues] = useState([0,0,0]);\r\n\r\n    // when the result change, get another random values\r\n    useEffect(()=>{\r\n        // checking the values are not equal to result or less to 0\r\n        let value1 = -1;\r\n        while (value1 < 0 || value1 === result ){\r\n            value1 = randomNumber((result - 10),(result+10));\r\n        } \r\n\r\n        let value2 = -1;\r\n        while (value2 < 0 || value2 === result || value2 === value1 ){\r\n            value2 = randomNumber((result - 10),(result+10));\r\n        }       \r\n        // Shuffle array\r\n        setValues(shuffleArray([value1,value2,result]));\r\n    },[result]);\r\n\r\n    // Check if clicked the right value\r\n    const checkingResult = e =>{\r\n        e.preventDefault();\r\n\r\n        // If the chosen value is equal to the correct result, I add 10 points to the score\r\n        // if it's not the correct one, rest one to the lives\r\n        // if the number of lives is less than 0 end of the game (reset - Lives - Score - Number of clicks)\r\n\r\n        if(parseInt(e.target.value) === result){\r\n            setScore(score+10);\r\n            playCorrect();\r\n            message.success('Great!!!'); \r\n        }else{\r\n            if(lives > 0){\r\n                setLives(lives-1);\r\n                playError();\r\n                message.warning('Wrong answer :('); \r\n            }else{\r\n                // alert(`Game Over!! - You Score: ${score}`);\r\n                gameOver();\r\n                setClicked(0);\r\n                resetLives();\r\n                setScore(0);\r\n            }\r\n        }\r\n        setClicked(clicked + 1); \r\n    }\r\n\r\n    // Shufle the array order\r\n    const shuffleArray = (numbersArray) =>{\r\n        return numbersArray.sort(()=> Math.random() - 0.5);\r\n    }\r\n\r\n    // Modal info for game over\r\n    const gameOver = () =>{\r\n        Modal.info({\r\n            title: <h2 style={{textAlign:'center', fontSize:'45px'}}>GAME OVER</h2>,\r\n            content: (\r\n                <div style={{textAlign:'center', fontSize:'25px'}}>\r\n                    <p>You Score is:</p>\r\n                    <p style={{fontSize:'30px', fontWeight:'bold', padding:'20px'}}>{score}</p>\r\n                </div>\r\n            ),\r\n            onOk(){},\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"result-buttons\">\r\n            { values.map((val =>{\r\n                return (\r\n                    <button\r\n                        key={Math.random(val)}\r\n                        value={val}\r\n                        onClick={checkingResult}\r\n                    >{val}</button>\r\n                )\r\n            }))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Result","export default __webpack_public_path__ + \"static/media/error-sound.7c938615.mp3\";","export default __webpack_public_path__ + \"static/media/correct-sound.9cf3f5ce.mp3\";","import { useState } from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header';\r\nimport Operation from './components/Operation';\r\nimport Result from './components/Result';\r\n\r\n// import Tips from './components/Tips';\r\nimport 'antd/dist/antd.css';\r\nimport { Row, Col } from 'antd';\r\n\r\nimport audioError from \"./assets/sounds/error-sound.mp3\";\r\nimport audioCorrect from \"./assets/sounds/correct-sound.mp3\";\r\n\r\nfunction App() {\r\n\r\n  const Lives = 5;\r\n\r\n  const [selectedOp, setSelectedOp] = useState(\"+\");\r\n  const [result, setResult] = useState(0);\r\n  const [score, setScore] = useState(0);\r\n  const [lives, setLives] = useState(Lives);\r\n  const [clicked, setClicked] = useState(0);\r\n\r\n  const resetLives = () =>{\r\n    setLives(Lives);\r\n  }\r\n\r\n  const playError = ()=>{\r\n    new Audio(audioError).play();\r\n  }\r\n\r\n\r\n  const playCorrect = ()=>{\r\n    new Audio(audioCorrect).play();\r\n  }\r\n\r\n  return (\r\n    <div className=\"body\">\r\n      <Row className=\"container header\">\r\n        <Col span={24}>\r\n          {/* Header component contain the operation election button \r\n              Show the score and rest lives */}\r\n          <Header \r\n            setSelectedOp={setSelectedOp}\r\n            score={score}\r\n            lives={lives}\r\n         />\r\n        </Col>\r\n      </Row>\r\n\r\n\r\n      <Row className=\"container\" >\r\n        <Col className=\"glass glass-blue operation-buttons\">\r\n          {/* Operation contain the numbers for the operation\r\n              and operator */}\r\n          <Operation \r\n            selectedOp={selectedOp}\r\n            setResult={setResult}\r\n            setClicked={setClicked}\r\n            clicked={clicked}\r\n          />\r\n        </Col>\r\n        \r\n        <Col className=\"glass result-container\">\r\n          {/* Result contain the 3 numbers where  the correct one must be chosen */}\r\n          <Result \r\n            setScore={setScore}\r\n            setClicked={setClicked}\r\n            setLives={setLives}\r\n            resetLives={resetLives}\r\n            playCorrect={playCorrect}\r\n            playError={playError}\r\n            result={result}\r\n            score={score}\r\n            clicked={clicked}\r\n            lives={lives}          \r\n          />\r\n        </Col>\r\n      </Row>\r\n      \r\n\r\n      {/* <Tips /> */}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}